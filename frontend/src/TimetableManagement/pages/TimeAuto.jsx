import { useState, useEffect } from "react";
import axios from "axios";
import { RefreshCw, Upload } from "lucide-react";
import { useNavigate } from "react-router-dom";
import { motion } from "framer-motion";

export default function TimeAuto() {
  const [allocations, setAllocations] = useState([]);
  const [batches, setBatches] = useState([]);
  const [rooms, setRooms] = useState([]);
  const [schedules, setSchedules] = useState([]);
  const [selectedBatch, setSelectedBatch] = useState("");
  const [loading, setLoading] = useState(false);
  const [autoGeneratedSchedules, setAutoGeneratedSchedules] = useState([]);
  const navigate = useNavigate();

  // Fetch initial data
  const fetchData = async () => {
    setLoading(true);
    try {
      const [allocationsRes, batchesRes, roomsRes, timetableRes] = await Promise.all([
        axios.get("http://localhost:5000/api/allocations"),
        axios.get("http://localhost:5000/api/batches"),
        axios.get("http://localhost:5000/api/rooms"),
        axios.get("http://localhost:5000/api/timetable"),
      ]);
      setAllocations(allocationsRes.data);
      setBatches(batchesRes.data);
      setRooms(roomsRes.data.filter((room) => room.hallType !== "Meeting Room"));
      setSchedules(timetableRes.data);
    } catch (err) {
      console.error("Error fetching data:", err.response ? err.response.data : err.message);
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    fetchData();
  }, []);

  // Auto-generate schedules for the selected batch
  const autoGenerateSchedules = () => {
    if (!selectedBatch) {
      alert("Please select a batch!");
      return;
    }

    setLoading(true);
    const batchAllocations = allocations.filter((a) => a.batchName === selectedBatch);
    const batchData = batches.find((b) => b.batchName === selectedBatch);
    const isWeekendBatch = batchData?.scheduleType === "Weekend";

    const generatedSchedules = [];
    const availableDays = isWeekendBatch ? [0, 6] : [1, 2, 3, 4, 5]; // 0 = Sunday, 6 = Saturday
    const timeSlots = Array.from({ length: 10 }, (_, i) => `${(i + 8).toString().padStart(2, "0")}:00`);

    batchAllocations.forEach((allocation) => {
      const newSchedule = {
        allocationId: allocation.allocationId,
        batch: selectedBatch,
        subjects: [],
      };

      allocation.subjects.forEach((subject) => {
        let scheduled = false;
        let currentDate = new Date();
        currentDate.setHours(0, 0, 0, 0);

        while (!scheduled && currentDate < new Date().setMonth(new Date().getMonth() + 3)) { // Look ahead 3 months
          currentDate.setDate(currentDate.getDate() + 1);
          if (!availableDays.includes(currentDate.getDay())) continue;

          for (const time of timeSlots) {
            for (const room of rooms) {
              if (isSlotAvailable(room.LID, currentDate, time, subject.duration || "1")) {
                newSchedule.subjects.push({
                  subjectName: subject.subjectName,
                  lecturer: subject.lecturerName,
                  room: room.LID,
                  date: currentDate.toISOString().split("T")[0],
                  time,
                  duration: subject.duration || "1",
                });
                scheduled = true;
                break;
              }
            }
            if (scheduled) break;
          }
          if (scheduled) break;
        }
      });

      if (newSchedule.subjects.length > 0) {
        generatedSchedules.push(newSchedule);
      }
    });

    setAutoGeneratedSchedules(generatedSchedules);
    setLoading(false);
  };

  // Check if a slot is available
  const isSlotAvailable = (room, date, time, duration) => {
    const startTime = new Date(`${date.toISOString().split("T")[0]}T${time}:00`);
    const endTime = new Date(startTime);
    endTime.setHours(endTime.getHours() + parseInt(duration));

    return !schedules.some((schedule) =>
      schedule.subjects.some((subject) => {
        const existingStart = new Date(`${subject.date}T${subject.time}:00`);
        const existingEnd = new Date(existingStart);
        existingEnd.setHours(existingEnd.getHours() + parseInt(subject.duration));
        return (
          subject.room === room &&
          startTime < existingEnd &&
          endTime > existingStart
        );
      })
    );
  };

  // Save the auto-generated schedules
  const handleSaveSchedules = async () => {
    setLoading(true);
    try {
      for (const schedule of autoGeneratedSchedules) {
        await axios.post("http://localhost:5000/api/timetable", schedule);
      }
      setSchedules((prev) => [...prev, ...autoGeneratedSchedules]);
      alert("Auto-generated schedules saved successfully!");
      setAutoGeneratedSchedules([]);
    } catch (err) {
      console.error("Error saving schedules:", err.response ? err.response.data : err.message);
      alert("Failed to save schedules. Check console for details.");
    } finally {
      setLoading(false);
    }
  };

  // Upload the schedules
  const handleUploadTimetable = async () => {
    if (autoGeneratedSchedules.length === 0) {
      alert("No schedules to upload!");
      return;
    }

    setLoading(true);
    try {
      await axios.post("http://localhost:5000/api/timetable/published-timetable", {
        batch: selectedBatch,
        schedules: autoGeneratedSchedules,
      });
      await axios.delete("http://localhost:5000/api/timetable/batch", { data: { batch: selectedBatch } });
      setSchedules((prev) => prev.filter((s) => s.batch !== selectedBatch));
      setAutoGeneratedSchedules([]);
      setSelectedBatch("");
      alert(`Timetable for ${selectedBatch} uploaded successfully!`);
      navigate("/TimeView", { state: { batch: selectedBatch } });
    } catch (err) {
      console.error("Upload error:", err.response ? err.response.data : err.message);
      alert("Failed to upload timetable. Check console for details.");
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="min-h-screen p-8 bg-gradient-to-br from-gray-100 to-gray-50">
      <motion.div
        initial={{ opacity: 0, y: -20 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ duration: 0.5 }}
        className="flex justify-between items-center mb-8"
      >
        <h2 className="text-3xl font-bold text-[#1B365D] tracking-tight">Auto Timetable Generation</h2>
        <motion.button
          whileHover={{ scale: 1.05 }}
          whileTap={{ scale: 0.95 }}
          onClick={fetchData}
          className="bg-[#1B365D] text-white px-4 py-2 rounded-lg flex items-center gap-2 hover:bg-[#1B365D]/80 transition-colors shadow-md"
        >
          <RefreshCw className="w-5 h-5" /> Refresh
        </motion.button>
      </motion.div>

      <motion.div
        initial={{ opacity: 0 }}
        animate={{ opacity: 1 }}
        transition={{ delay: 0.2, duration: 0.5 }}
        className="flex justify-between gap-4 mb-8"
      >
        <div className="relative">
          <select
            value={selectedBatch}
            onChange={(e) => setSelectedBatch(e.target.value)}
            className="appearance-none px-4 py-2 pr-8 bg-white border border-gray-200 rounded-lg text-[#1B365D] w-72 shadow-sm focus:outline-none focus:ring-2 focus:ring-[#1B365D] transition-all"
          >
            <option value="">Select Batch</option>
            {batches.map((batch) => (
              <option key={batch._id} value={batch.batchName}>
                {`${batch.batchName} (${batch.semester}, ${batch.scheduleType})`}
              </option>
            ))}
          </select>
        </div>
        <motion.button
          whileHover={{ scale: 1.05 }}
          whileTap={{ scale: 0.95 }}
          onClick={autoGenerateSchedules}
          disabled={loading || !selectedBatch}
          className="bg-gradient-to-r from-[#1B365D] to-[#2A4A7A] text-white px-6 py-2 rounded-lg flex items-center gap-2 hover:from-[#1B365D]/80 hover:to-[#2A4A7A]/80 transition-all shadow-md disabled:opacity-50"
        >
          Generate Schedules
        </motion.button>
      </motion.div>

      {loading ? (
        <div className="flex justify-center items-center h-64">
          <motion.div
            animate={{ rotate: 360 }}
            transition={{ repeat: Infinity, duration: 1 }}
            className="w-10 h-10 border-4 border-t-[#1B365D] border-gray-200 rounded-full"
          />
        </div>
      ) : (
        autoGeneratedSchedules.length > 0 && (
          <motion.div
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            transition={{ delay: 0.4, duration: 0.5 }}
            className="bg-white p-6 rounded-lg shadow-lg"
          >
            <h3 className="text-xl font-semibold text-[#1B365D] mb-4">Generated Schedules</h3>
            {autoGeneratedSchedules.map((schedule, index) => (
              <div key={index} className="mb-6 border-b pb-4">
                <h4 className="text-lg font-medium text-[#1B365D]">{schedule.allocationId} - {schedule.batch}</h4>
                {schedule.subjects.map((subject, subIndex) => (
                  <div key={subIndex} className="mt-2 text-sm text-gray-700">
                    <p><strong>{subject.subjectName}</strong> - {subject.lecturer}</p>
                    <p>Room: {subject.room} | Date: {subject.date} | Time: {subject.time} | Duration: {subject.duration} hr(s)</p>
                  </div>
                ))}
              </div>
            ))}
            <div className="flex justify-end gap-4">
              <motion.button
                whileHover={{ scale: 1.05 }}
                whileTap={{ scale: 0.95 }}
                onClick={handleSaveSchedules}
                className="bg-[#1B365D] text-white px-6 py-2 rounded-lg shadow-md hover:bg-[#1B365D]/80 transition-colors"
              >
                Save Schedules
              </motion.button>
              <motion.button
                whileHover={{ scale: 1.05 }}
                whileTap={{ scale: 0.95 }}
                onClick={handleUploadTimetable}
                className="bg-gradient-to-r from-[#1B365D] to-[#2A4A7A] text-white px-6 py-2 rounded-lg flex items-center gap-2 hover:from-[#1B365D]/80 hover:to-[#2A4A7A]/80 transition-all shadow-md"
              >
                <Upload className="w-5 h-5" /> Upload Timetable
              </motion.button>
            </div>
          </motion.div>
        )
      )}
    </div>
  );
}